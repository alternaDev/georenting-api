#%RAML 0.8

title: GeoRenting
baseUri: https://georenting.herokuapp.com/{version}
version: v1
protocols: [HTTPS]

schemas:
  - Fence: !include schema/fence.json

securitySchemes:
  - x-jean-auth:
      type: x-Jean-Auth
      description: Some requests require authentication. Jean-Auth uses a JSON Web Token in a Header to prove the Identity of the user.
      describedBy:
        headers:
          Authorization:
            description: |
              Used to send a valid Jean-Auth Token.
            type: string
        responses:
          401:
            description: |
              Bad or expired token. Reauthenticate the user.
          403:
            description: |
              Things are going bad for you. Reauthenticating won't help here.

documentation:
  - title: Home
    content: |
      Welcome to the GeoRenting API. This is WIP. Please use me gently.
  - title: Auth
    content: |
      The GeoRenting API uses JSON Web Tokens for authentication. You will get
      one through the Sign In API Call. You need a Google Account Token to login.
      Authenticated API calls require the token you get after login to be sent in a
      Authorization header.
  - title: GCM
    content: |
      The API will leverage Google Cloud Messaging to notify the user of specific events.

      <img src="art/comm.jpg" style="width: 700px" />

/users:
  get:
   queryParameters:
     name:
       description: Filter the users by name.
  /auth:
    post:
      description: Authenticate the User. Requires a Google OAuth Token.
      body:
        application/json:
          example: |
            {
              "google_token": "AAAJJJDDDDEEEE"
            }
      responses:
        200:
          description: Returns the JWT token.
          body:
            application/json:
              example: |
                {
                  "token": "asdaisdansd.asdiu088ur98uasd.oaisd982"
                }
        403:
          description: You sent an invalid Google OAuth token.
    delete:
      securedBy: [x-jean-auth]
      description: Delete the session.
      body:
        application/json:
          example: |
            {
              "token": "asdasdasd.asdpiajsdohuds9f8asdf.asdiasjdo"
            }
      responses:
        200:
          body:
            application/json:
              example: |
                {}
  /me:
    /gcm:
      post:
        description: Add a GCM ID.
        securedBy: [x-jean-auth]
        body:
          application/json:
            example: |
              {
                "gcm_id": "42ua0sd8n"
              }
      delete:
        description: Remove a GCM ID.
        securedBy: [x-jean-auth]
        body:
          application/json:
            example: |
              {
                "registration_id": "42ua0sd8n"
              }
        responses:
          200:
            body:
              application/json:
                example: |
                  {}
          403:
            description: The user is not authorized to do this.
          401:
            description: The specified GCM ID could not be deleted.
/fences:
  get:
    description: Get Fences by user or around a center location.
    queryParameters:
      user:
        type: string
        description: Get all Fences owned by the specified User ID.
        required: false
      latitude:
        type: number
        description: Get Fences near the specified center location. Requires longitude and radius.
      longitude:
        type: number
        description: Get Fences near the specified center location. Requires latitude and radius.
      radius:
        type: integer
        description: Get Fences near the specified center location. Requires latitude and longitude.
    responses:
      200:
        body:
          application/json:
            schema: Fence
            example: |
              [
                {
                  "id": 42
                  "centerLon": 54.42,
                  "centerLat": 8.5,
                  "name": "Ulfs Castle",
                  "radius": 200
                },
                {
                  "id": 45
                  "centerLon": 51.42,
                  "centerLat": 4.5,
                  "name": "Pedas House",
                  "radius": 100
                }
              ]
  post:
    description: Create the GeoFence.
    securedBy: [x-jean-auth]
    body:
      application/json:
        schema: Fence
        example: |
          {
            "centerLon": 54.42,
            "centerLat": 8.5,
            "name": "Ulfs Castle"
          }
    responses:
      200:
        body:
          application/json:
            schema: Fence
            example: |
              {
                "id": "42",
                "centerLon": 54.42,
                "centerLat": 8.5,
                "name": "Ulfs Castle",
                "radius": 100 
              }
      402:
        description: The user does not have enough GeoCoins.
      400:
        description: The GeoFence is overlapping with another GeoFence in its radius.
  /{fenceId}:
    get:
      description: Get information about the GeoFence.
      responses:
        200:
          body:
            application/json:
              schema: Fence
              example: |
                {
                  "id": "42",
                  "centerLon": 54.42,
                  "centerLat": 8.5,
                  "name": "Ulfs Castle",
                  "radius": 200
                }
        404:
          description: Not found.
    put:
      description: Update the GeoFence. Requires the user to be the owner of it.
      securedBy: [x-jean-auth]
      responses:
        200:
          body:
            application/json:
              schema: Fence
              example: |
                {
                  "id": "42",
                  "centerLon": 54.42,
                  "centerLat": 8.5,
                  "name": "Ulfs Castle",
                  "radius": 100
                }
        404:
          description: Not Found.
        403:
          description: The current user is not authorized to update that fence.
      body:
        application/json:
          schema: Fence
          example: |
            {
              "id": "42",
              "centerLon": 54.42,
              "centerLat": 8.5,
              "name": "Ulfs Castle"
            }
    delete:
      description: Delete the GeoFence. Requires the user to be the owner of it.
      securedBy: [x-jean-auth]
      responses:
        200:
          body:
            application/json:
              example: |
                {}
        404:
          description: Not Found.
        403:
          description: The current user is not authorized to delete the fence.
    /visit:
      post:
        securedBy: [x-jean-auth]
        description: |
          This method will visit a GeoFence. The visitor and the owner will be notified
          via GCM.
